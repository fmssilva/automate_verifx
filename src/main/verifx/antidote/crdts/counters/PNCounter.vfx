import antidote.crdts.lemmas.CvRDT
import antidote.crdts.lemmas.CvRDTProof
import antidote.crdts.counters.GCounter

////////////////////////////////////////////
// State-based Positive-Negative Counter //
//////////////////////////////////////////

class PNCounter(p: GCounter, n: GCounter) extends CvRDT[PNCounter] {
  def value() = this.p.value() - this.n.value()

  def increment(replica: Int, value: Int) =
    new PNCounter(this.p.increment(replica, value), this.n)

  def decrement(replica: Int, value: Int) =
    new PNCounter(this.p, this.n.increment(replica, value))

  def merge(that: PNCounter) =
    new PNCounter(this.p.merge(that.p), this.n.merge(that.n))

  def compare(that: PNCounter): Boolean =
    this.p.compare(that.p) && this.n.compare(that.n)

  override def reachable(): Boolean =
    this.p.wellFormed() && this.n.wellFormed() && this.p.networkSize() == 3 && this.n.networkSize() == 3

}

object PNCounter extends CvRDTProof[PNCounter]