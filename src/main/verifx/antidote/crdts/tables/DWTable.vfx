
import antidote.crdts.lemmas.CvRDT
import antidote.crdts.tables.DWElement
import antidote.crdts.tables.PKTrait
import antidote.crdts.registers.MVRegister

/**
 * A table is a map of elements with entries:  < primary key, tuple (value, [flags/Time]) >
 *      flags: 0 - I (inserted/updated), 1 - T (touched), 2 - D (deleted)
 * @param PK: primary key type
 * @param V: value type
 * @param Time: time type
 * @param T: concrete table type
 */
trait DWTable[ PK <: PKTrait, V <: CvRDT_Element[V], Time, T <: DWTable[ PK, V, Time, T]]
            extends CvRDT {
     // TODO: mudar a class UW para extend DWTable e faz override a alguns metodos como isVisible, insert, remove...


    // elements is a map of elements with entries:  < primary key, tuple (value, [flags/Time]) >
    // we don't call it table, because the class itself includes this map of elements, plus a before function, and maybe other data
    val elements: Map[PK, Tuple[V, MVRegister[Int, Time]]]

    // Before is defined in VersionVector
    //TODO: pra quê declarar aqui???
    val before: (Time, Time) => Boolean



    ///////////////////////////////////////////////////////////////////////////
    //////////   Functions to be implemented by each Concrete Table   /////////
    ///////////////////////////////////////////////////////////////////////////

    /**
     * Concrete class replaces the old table by the given new one
     * @param newTable: new map of the table
     * @return the copied table
     */
    def copy(newTable: Map[PK, Tuple[V, MVRegister[Int, Time]]]): T

    /**
     * @return the current concrete table
     */
    def maintainState(): T

    // TODO: implementar isto nas classes das tabelas
    // TODO: pra podermos ter listas de Tables e PKs:
            // ter uma class PK que todas PKs extends
            // implementar super class Table que DW e UW herdam... ou na prática todas as tabelas tem que ser DW agora, mesmo que sejam UW policy?
    // get for all fk attributes, the FK Table, FK values, FK version number
    //def getFKsData (pk: PK) : Set[LList[DWTable, PK, Int]]
//    def getFKsTables () : LList [DWTable]
//
//    def getFKsAttributes (pk: PK ) : LList[Tuple[PK, Int]]




    ///////////////////////////////////////////////////////////////////////////
    ////////////////////////   Table Operations   /////////////////////////////
    ///////////////////////////////////////////////////////////////////////////


    /**
     * Update the values of the element
     * @param pk: primary key of the element
     * @param v: new value of the element
     * @return the updated table
     * @Pre: the element exists, so we don't check if isVisible again
     */
    private def updateValues (pk: PK, v: V): T = {
        val curr_flags = this.elements.get(pk).snd     // TODO: é bom atualizar o time da flag I?
        val new_row = new Tuple(v, curr_flags)
        this.copy( this.elements.add(pk, new_row) )
    }


    /**
    * Delete an element from the table
    * @param pk: primary key of the element
    * @param t: time of the operation
    * @return the updated table
    * @Pre: the element exists, so we don't check again
    */
    private def deleteElement(pk: PK, row: Tuple[V, MVRegister[Int, Time]], t: Time): T = {
        val new_flags = row.snd.assign(2, t) // D  //TODO: este assing apaga o I, ou é preciso fazer um remove(I)? pq o MVRegister não tem um remove
        val new_row = new Tuple(row.fst, new_flags)
        this.copy( this.elements.add(pk, new_row) )
    }

    /**
     * Remove an element from the table, if exists
     * @param pk: primary key of the element
     * @param v: value of the element
     * @param t: time of the operation
     * @return the updated table
     */
    def remove (pk: PK, t: Time): T = {
        if ( this.elements.contains(pk) ) {
            val row = this.elements.get(pk)
            if ( row.snd.contains(2) )// D flag
                this.maintainState()
            else
                this.deleteElement(pk, row, t)
        }
        else
            this.maintainState()
    }



    /**
     * Check if the element is visible
     * ////// This verification is just for a single UWTable, not for the whole FK System
     * @param pk: primary key of the element
     * @param t: time of the operation (so we can delete the element if it's not visible to avoid checking again in the future)
     * @return true if the element is visible, false otherwise
     */
    def isVisible(pk: PK, t: Time): Int = {
        // check element in this table
        if ( ! this.elements.contains(pk) )
            return 0
        val row = this.elements.get(pk)
        if ( row.snd.contains(2) ) // D flag
            return 0

        row.fst.get_PK_version()

//        //TODO: fazer isto no FK System, pq só quem é referenced tem que ver isto
//        //TODO: FK System agora junta as verificações do child pro parent e do parent pro child
//        // check FK references in "parents" and confirm versions
//        val fks_data = this.elements.get(pk).fst.getFKsData() // TODO: meter isto ao nivel de Table
//        val fks_are_visible = fks_data.forall(
//                (fk_entry : LList[DWTable, PK, Int] ) => {
//                    val parent_version = fk_entry.get(0).isVisible( fk_entry.get(1), fk_entry.get(2), t )  // recursive check of FK attributes until the root table
//                    elem_version == parent_version
//                }
//            )
//        if ( fks_are_visible  )
//            return elem_version
//        // else: delete this element, so next time we stop the search sooner instead of going to the root table again
//        this.deleteElement(pk, row, t)
//        return 0
    }


//    /**
//     * Check if the FK attributes are visible (without checking the if the pk is visible in this table)
//     * @param pk: primary key of the element
//     * @param t: time of the operation (so we can delete the element if it's not visible to avoid checking again in the future)
//     * @return true if the FK attributes are visible, false otherwise
//     */
//    private def fksAreVisible(pk : PK, t: Time): Boolean = {
//        val fks_data = this.getFKsData(pk)
//        fks_data.forall( fk_entry => fk_entry[0].isVisible( fk_entry[1],  t ) )
//    }


    /**
     * Insert an element in the table, with version number = 1
     * (if the element already exists, update its value)
     * @param pk: primary key of the element
     * @param v: value of the element
     * @param t: time of the operation
     * @return the updated table
     */
     //TODO: isto ja tava a ver FK  mas dp isso vai pra class FKSystem, em tabela isolada considera-se que FKs são visiveis
    def insert(pk: PK, v: V, t: Time): T = {
        // get booleans into variables to avoid multiple calls
//        val fks_are_visible = this.fksAreVisible(pk, t)
        val pk_exists = this.elements.contains(pk)
//        if ( fks_are_visible ) {
            if ( pk_exists )
                this.updateValues(pk, v)
            else { //pk dont exist -> add new element
                // touch all FKs, and get its current version, and save that version in this table for each FK
//                fks.map(
//                    tupl => {
//                        //TODO: este Touch não é preciso pra nada... a menos que a convergence obrigue mesmo a BD iguais, e náo apenas a que os reads retornem valores iguais (que é o que interessa)
//                        //val version = tupl.fst.touch(tupl.snd, t)
//                        //v.update_FK_version(tupl.fst, version)
//                    }
//                )
                // update the version of this element with the initial version number, add the flag (I), and save the element in the table
                v = v.update_PK_version(1)
                val flags = new MVRegister[Int, Time](this.before).assign(0, t) //I
                val row = new Tuple(v, flags)
                this.copy( this.elements.add(pk, row) )
            }
//        } else { // fks are not visible
//            if ( this.elements.contains(pk) ) {
//                val row = this.elements.get(pk)
//                this.deleteElement(pk, row, t) // delete the element to make future search faster
//            } else
//                this
//        }
    }




    ///////////////////////////////////////////////////////////////////////////
    ////////////////////////   CvRDT_Element Operations   /////////////////////////////
    ///////////////////////////////////////////////////////////////////////////

    /**
     * Merge this table with another table
     * @param that: the other table
     * @return the merged table
     */
    def merge(that: T): T = {
        //TODO: podemos declarar funções assim como variaveis pra ficar mais claro?
        val mergeRowFunction = ( e1: Tuple[E, MVRegister[Int, Time]],
                                  e2: Tuple[E, MVRegister[Int, Int, Time]]
                                 ) => new Tuple( e1.fst.merge(e2.fst), e1.snd.merge(e2.snd) )
                                 //TODO: se 1 for D e 2 for I, confirmar que apagamos o I
        val mergedMap = this.elements.combine( that.table, mergeRowFunction )
        this.copy(mergedMap)
    }

    /**
     * @return True if (this table <= that table)
     * @param that: the other table
     * TODO: dp ver como implementar um compare para tabelas que não sejam sempre crescentes???
     */
    def compare(that: T): Boolean = { //ignore
        true
    }


    /**
     * @return True if the table is reachable
     * » To filter the space of possible states, we use this predicate
     */
    override def reachable(): Boolean = {
        //this.beforeAssumptions() && this.mergeValuesAssumptions() &&
        this.elements.values().forall(
            (row: Tuple[V, MVRegister[Int, Time]]
            ) =>   row.fst.reachable() &&
                   //elem.snd.CvRDT_Element() &&
                   //elem.fst.reachable() &&
                   elem.snd.reachableWithoutTime(this.before) &&
                   // restricts the values of the mvregister to the values of the flags
                   elem.snd.values.forall((v: Tuple[Int, Time]) => v.fst == 0 || v.fst == 1 ||
                   v.fst == 2 ))
    }


    /**
     * Check if this table is less than or equal to another table
     * @param that: the other table
     * @return true if this table is less than or equal to the other table, false otherwise
     */
    override def compatible(that: T): Boolean = {
        this.before == that.before &&
        this.elements.zip(that.elements).values().forall(
            ( ziped_row: Tuple[  Tuple[V, MVRegister[Int, Time]],  Tuple[V, MVRegister[Int, Time]] ]
            ) => {  val row1 = ziped_row.fst
                    val row2 = ziped_row.snd
                    row1.fst.compatible(row2.fst) && row1.snd.compatible(row2.snd)
                }
        )
    }




    override def equals(that: T): Boolean = {
        this == that
    }

}


