import antidote.crdts.lemmas.CvRDT

/*
 * Extend this trait to prove convergence for a polymorphic state-based CRDT that takes 1 type parameter.
 * The type parameter `T` is a type constructor of a state-based CRDT,
 * e.g. class LWWRegister[V](...) extends CvRDT[LWWRegister[V]]
 *      object LWWRegister extends CvRDTProof1[LWWRegister]
 *      This will generate a polymorphic proof that proves that `LWWRegister` is a CvRDT,
 *      independent of the type of the value the `LWWRegister` stores (i.e. proves it forall `V`).
 */
trait CvRDTProof1[ T[A] <: CvRDT[T[A]] ] {


  proof is_a_CvRDT[S] {
    forall (x: T[S], y: T[S], z: T[S]) {
      ( x.reachable() && y.reachable() && z.reachable() &&
        x.compatible(y) && x.compatible(z) && y.compatible(z)
        ) =>: {
            x.merge(x).equals(x) && // idempotent
            x.merge(y).equals(y.merge(x)) && // commutative
            x.merge(y).merge(z).equals(x.merge(y.merge(z))) && // associative
            x.merge(y).reachable() && // merged state is reachable
            x.merge(y).merge(z).reachable() &&
            x.compatible(y) == y.compatible(x) // compatible commutes
          }
    }
  }

  proof mergeCommutative[S] {
    forall (x: T[S], y: T[S]) {
      (x.reachable() && y.reachable() && x.compatible(y)
      ) =>: {
        val x_merge_y = x.merge(y)
        x_merge_y.equals(y.merge(x))
        x_merge_y.reachable()
      }
    }
  }


  proof mergeIdempotent[S] {
    forall (x: T[S]) {
      x.reachable() =>: x.merge(x).equals(x)
    }
  }

  proof mergeAssociative[S] {
    forall (x: T[S], y: T[S], z: T[S]) {
      ( x.reachable() && y.reachable() && z.reachable() &&
        x.compatible(y) && x.compatible(z) && y.compatible(z)
      ) =>: {
        val xyz = x.merge(y).merge(z)
        xyz.equals(x.merge(y.merge(z))) // 26 seconds
        // TODO: estas de baixo estavam em comentÃ¡rio
        xyz.reachable()                 // 32 seconds
        x.merge(y).compatible(z)        // 25 seconds
        x.compatible(y.merge(z))        // 26 seconds
      }
    }
  }

  proof mergeAssociative2[S] {
    forall (x: T[S], y: T[S], z: T[S]) {
      ( x.reachable() && y.reachable() && z.reachable() &&
        x.compatible(y) && x.compatible(z) && y.compatible(z)
       ) =>: {
        x.merge(y).merge(z).reachable()
        // TODO: also show that x.merge(y).compatible(z) && x.compatible(y.merge(z)) ??
      }
    }
  }

  proof compatibleCommutes[S] {
    forall (x: T[S], y: T[S]) {
      ( x.reachable() && y.reachable()
      ) =>: ( x.compatible(y) == y.compatible(x) )
    }
  }

  proof compareCorrect[S] {
    forall (x: T[S], y: T[S]) {
      ( x.reachable() && y.reachable() && x.compatible(y)
      ) =>: (x.equals(y) == (x == y))
    }
  }

}