import antidote.crdts.lemmas.CvRDT
import antidote.crdts.lemmas.CvRDTProof2

/**
* A Multi-Value Register (MVRegister)
* is a register that can hold multiple concurrently inserted values
* when we insert 1 or more values, the older ones are replaced
* when we merge two MVRegisters, we delete the older values and keep the all the new concurrent values
* Generic parameters:
*       V The type of the values stored in the MVRegister
*       Time The type of the timestamps used in the MVRegister (ex Lamport or Version Vector)
* @param before - a function that defines the order of the timestamps
* @param values - a set of tuples, each containing a value and a timestamp
*/
class MVRegister[V, Time](
                            before: (Time, Time) => Boolean,
                            values: Set[Tuple[V, Time]] = new Set[Tuple[V, Time]]()
                          ) extends CvRDT[MVRegister[V, Time]] {


    /////////////////////////////////////////////////////////////////////
    ////////////////////   MVRegister Operations   //////////////////////
    /////////////////////////////////////////////////////////////////////

    /**
     * Check if the MVRegister contains the given value.
     */
    def contains(e: V): Boolean = {
        this.values.map((x: Tuple[V, Time]) => x.fst).contains(e)
    }

    /**
     * Get the current values of the MVRegister, without the Time component.
     */
    def value(): Set[V] =
        this.values.map( (t: Tuple[V, Time]) => t.fst )

    /**
     * Set the MVRegister to the given value.
     * When this operation is done in a local replica, all previous values are deleted and only this new one is kept
     * When merging, if we have concurrent values, so we keep all
     * If in a local replica you want to keep multiple values, use `assignMany`
     */
    def assign(v: V, timestamp: Time) = {
        val newValue = new Set[Tuple[V, Time]]().add(new Tuple(v, timestamp))
        new MVRegister(this.before, newValue)
    }

    /**
     * Set the MVRegister to the given values.
     * When this operation is done in a local replica, all previous values are deleted and only these new ones are kept
     * When merging, if we have concurrent values, so we keep all
     */
    def assignMany(vs: Set[V], timestamp: Time) = {
        val stampedValues = vs.map((v: V) => new Tuple(v, timestamp))
        new MVRegister(this.before, stampedValues)
    }



    /////////////////////////////////////////////////////////////////////
    //////////////////////   CvRDT Operations   /////////////////////////
    /////////////////////////////////////////////////////////////////////

    // --> HELPER FUNCTIONS
    // Define some helper functions regarding time based on `before`
    private def concurrent(t1: Time, t2: Time) =
        t1 != t2 && !this.before(t1, t2) && !this.before(t2, t1)

    private def beforeOrEqual(t1: Time, t2: Time) =
        t1 == t2 || this.before(t1, t2)

    private def afterOrEqual(t1: Time, t2: Time) =
        t1 == t2 || this.before(t2, t1)

    /**
     * In this MVRegister, keep only the values that are concurrent or latter than that MVRegister
     * This is used when merging two MVRegisters.
     */
    private def keepLatest(that: MVRegister[V, Time]) = {
        this.values.filter( (this_entry: Tuple[V, Time])
            => { val this_time = this_entry.snd
                 that.values.forall((that_entry: Tuple[V, Time])
                    => { val that_time = that_entry.snd
                         this.concurrent(this_time, that_time) || this.afterOrEqual(this_time, that_time)
                        })
                })
    }

    // --> CvRDT OPERATIONS

    /**
     * @return True if all the values of this MVRegister are before or equal to the values of the other MVRegister
     */
    def compare(that: MVRegister[V, Time]) = {
        this.values.forall((x: Tuple[V, Time])
            => { that.values.forall((y: Tuple[V, Time])
                => { this.beforeOrEqual(x.snd, y.snd)
                    })
                })
       }


    /**
     * Merge two MVRegisters.
     * When merging, we keep all the values that are concurrent or latter than the other MVRegister
     */
    def merge(that: MVRegister[V, Time]) = {
        val myLatestValues = this.keepLatest(that)
        val hisLatestValues = that.keepLatest(this)
        val mergedValues = myLatestValues.union(hisLatestValues)
        new MVRegister(this.before, mergedValues)
      }

    /**
     * Check if the two MVRegisters use the same before function
     * @return True if the two MVRegisters have the same notion of time
     */
    override def compatible(that: MVRegister[V, Time]): Boolean = {
        this.before == that.before
    }


    /**
     * Check if all the values of this MVRegister are valid
     */
    override def reachable() = {
        // Encode the assumptions that must be true for the logical clock being used
        forall (t1: Time) {
              !this.before(t1, t1) // irreflexive - a timestamp is not before itself
        } &&
        forall (t1: Time, t2: Time) {
            this.before(t1, t2) =>: !this.before(t2, t1) // antisymmetric - if a timestamp is before another, the other is not before the first
        } &&
        forall (t1: Time, t2: Time, t3: Time) {
            (this.before(t1, t2) && this.before(t2, t3)) =>: this.before(t1, t3) // transitive - if a timestamp is before another and that one is before a third, the first is before the third
        } &&
        // Now we encode the fact that all values contained by the register were written concurrently (or at the same time, e.g. by using `assignMany`)
        this.values.forall((t1: Tuple[V, Time])
            => { this.values.forall( (t2: Tuple[V, Time])
                    => { t1.snd == t2.snd || this.concurrent(t1.snd, t2.snd)
                        })
                })
    }

    /**
     * Check if all the values of this MVRegister are valid
     * @param beforeF - the function that defines the order of the timestamps
     * @return True if all the values of this MVRegister are reachable from the given state
     */
    def reachableWithoutTime(beforeF: (Time, Time) => Boolean): Boolean =
        this.before == beforeF &&
        this.values.forall((t1: Tuple[V, Time])
            => { this.values.forall((t2: Tuple[V, Time])
                => { t1.snd == t2.snd || this.concurrent(t1.snd, t2.snd)
                    })
                })

    /**
     * Check if the two MVRegisters are equal
     * In the prover this == will check the values and not the references of the MVRegisters
     * @return True if the two MVRegisters have the same values and the same notion of time
     */
    override def equals(that: MVRegister[V, Time]): Boolean = {
        this == that
    }

}

/**
 * Companion object for the MVRegister class
 */
object MVRegister extends CvRDTProof2[MVRegister]