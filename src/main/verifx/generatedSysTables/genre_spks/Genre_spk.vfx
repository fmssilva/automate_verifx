
import antidote.crdts.lemmas.CvRDT
import antidote.crdts.lemmas.CvRDTProof
import antidote.crdts.registers.LWWRegister
import antidote.crdts.LamportClock



/**
 * Class representing the element(row):::  GENRE_SPK 
 *
 * given by the Antidote SQL command:
 *
 *		CREATE UPDATE-WINS TABLE GENRE_SPK (
 *		STYLE VARCHAR PRIMARY KEY ,
 *		DESCRIPTION LWW VARCHAR
 *		)
 */
class Genre_spk(style: String, description: LWWRegister[String]) extends CvRDT[Genre_spk] {


  /*
   * IMPLEMENTATION OF METHODS DECLARED IN CVRDT TRAIT
   */

	//merge this Genre_spk with that Genre_spk (only concurrently updatable attributes are merged as a CRDT)
	def merge(that: Genre_spk) = 
		new Genre_spk(this.style, this.description.merge(that.description))

	//compare this Genre_spk with that Genre_spk (only concurrently updatable attributes matter)
	def compare(that: Genre_spk) = 
		this.description.compare(that.description)



  /*
   * OVERRIDE METHODS IMPLEMENTED IN CVRDT TRAIT
   */

	//this Genre_spk is compatible with that Genre_spk?
	override def compatible(that: Genre_spk) = 
		this.style == that.style && 
		this.description.compatible(that.description)



  /*
   * IMPLEMENT METHODS FOR CONCURRENTLY UPDATABLE ATTRIBUTES,
   * to be used by the prover, useful in CmRDT - Operations
   */

	def updateDescription(newDescription: String, stampDescription: LamportClock) = { 
			new Genre_spk(this.style, this.description.assign(newDescription, stampDescription))
	}

}




/*
* Object to implement the proof functions for the updatable attributes
*/

object Genre_spk extends CvRDTProof[Genre_spk] {

	proof Genre_spk_updateDescription_works {
		forall(elem: Genre_spk, description1: String, description2: String, c1: LamportClock, c2: LamportClock ) {
			( elem.reachable()  &&  c1.smaller(c2)
			 ) =>: {
				 //simulate the update of the element in 2 replicas, creating elem 1 and 2, and then merging them in elem12
				 val elem1 = elem.updateDescription(description1, c1)
				 val elem2 = elem.updateDescription(description2, c2)
				 val elem12 = elem1.merge(elem2)
				 //check if the update in elem 1 and 2 kept the correct values
				 elem1.style == elem.style && elem2.style == elem.style &&
				 elem1.description.value == description1 && elem2.description.value == description2 &&
				 //check if the merged values are correct and according to the chosen update-policy 
				 elem12.style == elem.style &&
				 elem12.description.value == description2
			}
		}
	}

}
