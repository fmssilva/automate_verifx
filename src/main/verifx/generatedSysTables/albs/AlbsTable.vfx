
import generatedSysTables.albs.Alb
import antidote.crdts.lemmas.CvRDTProof1
import antidote.crdts.tables.DWTable
import antidote.crdts.tables.DWFlags


class AlbsTable[Time]
					( before: (Time, Time) => Boolean,						//function
					  elements: Map[AlbPK, Tuple[DWFlags, Alb]]	//row
					  ) extends CvRDT[AlbsTable[Time]] {

    // HELPER FUNCTIONS FOR FK SYSTEM
    def getVersion (pk: AlbPK): Int = {
        val elem = this.elements.get(pk)
        if (elem.fst.flag == 0) // DELETED
            0
        else
            elem.fst.version
    }



    override def reachable(): Boolean = {
        this.elements.values().forall(
            (elem: Tuple[DWFlags, Alb]) =>
                elem.fst.version >= 1 &&
                elem.fst.flag != 0 &&  // NOT DELETED
                elem.snd.reachable()
        )
    }

    def merge (that: AlbsTable[Time]) = {
        val mergedElements = this.elements.combine(
            that.elements,
            (elem1: Tuple[DWFlags, Alb], elem2: Tuple[DWFlags, Alb]) => {
                if (elem1.fst.version > elem2.fst.version)
                    elem1
                else if (elem2.fst.version > elem1.fst.version)
                    elem2
                else if (elem1.fst.flag == 0 && elem2.fst.flag == 1) // this is DELETED
                    elem1
                else if (elem2.fst.flag == 0 && elem1.fst.flag == 1) // that is DELETED
                    elem2
                else
                    elem1
            })
        this.copy(mergedElements)
    }

    override def compatible(that: AlbsTable[Time]): Boolean = {
        this.before == that.before &&
        this.elements.zip(that.elements).values().forall(
            (elem: Tuple[Tuple[DWFlags, Alb], Tuple[DWFlags, Alb]]) => {
                val e1 = elem.fst
                val e2 = elem.snd
                e1.fst.compatible(e2.fst) && // flags
                e1.snd.compatible(e2.snd)   // Alb
            }
        )
    }

    //ignore this compare and override equals directly in an efficient way
    def compare(that: AlbsTable[Time]): Boolean = {
        false
//        this.elements.zip(that.elements).values().forall(
//                (elem: Tuple[Tuple[DWFlags, Alb], Tuple[DWFlags, Alb]]) => {
//                    val e1 = elem.fst
//                    val e2 = elem.snd
//                    e1.fst.compare(e2.fst) && // flags
//                    e1.snd.compare(e2.snd)    // Alb
//                }
//            )
    }

    override def equals(that: AlbsTable[Time]): Boolean = {
        this.before == that.before &&
        this.elements.zip(that.elements).values().forall(
            (elem: Tuple[Tuple[DWFlags, Alb], Tuple[DWFlags, Alb]]) => {
                val e1 = elem.fst
                val e2 = elem.snd
                e1.fst == e2.fst && // flags
                e1.snd == e2.snd    // Alb
            }
        )
    }

	def copy(newElements: Map[AlbPK, Tuple[DWFlags, Alb]]) =
		    new AlbsTable(this.before, newElements)

}

object AlbsTable extends CvRDTProof1[AlbsTable] {}
