
import antidote.crdts.lemmas.CvRDT
import antidote.crdts.LamportClock
import antidote.crdts.VersionVector
import antidote.crdts.lemmas.CvRDTProof1
import generatedSysTables.song_views.Song_viewsTable
import generatedSysTables.arts.ArtsTable
import generatedSysTables.songs.SongsTable
import generatedSysTables.albs.AlbsTable
import generatedSysTables.genres.GenresTable
import generatedSysTables.arts.Art

/*
 * class implementing the FK - Referential Integrity - Invariant
 */
class Song_view_FK_System[Time](
					song_viewsTable: Song_viewsTable[Time],
					artsTable: ArtsTable[Time], 
					songsTable: SongsTable[Time], 
					albsTable: AlbsTable[Time], 
					genresTable: GenresTable[Time] )
					extends CvRDT[Song_view_FK_System[Time]] {


  /*
   * OVERRIDE DEFAULT IMPLEMENTATION OF METHODS IN CvRDT TRAIT
   */ 

	//REACHABLE - check if this table and the referenced tables are reachable
	override def reachable(): Boolean =
				this.song_viewsTable.reachable() && 
				this.artsTable.reachable() && 
				this.songsTable.reachable() && 
				this.albsTable.reachable() && 
				this.genresTable.reachable()


	//COMPATIBLE - check if this Song_view_FK_System is compatible with that song_viewsTable
	override def compatible(that: Song_view_FK_System[Time]): Boolean =
				this.song_viewsTable.compatible(that.song_viewsTable) &&
				this.artsTable.compatible(that.artsTable) &&
				this.songsTable.compatible(that.songsTable) &&
				this.albsTable.compatible(that.albsTable) &&
				this.genresTable.compatible(that.genresTable)


	//EQUALS - check if this Song_view_FK_System is equal to that Song_view_FK_System
	override def equals(that: Song_view_FK_System[Time]) =
				this == that


  /*
   * IMPLEMENT DECLARED METHODS IN CvRDT TRAIT
   */

	//MERGE this Song_view_FK_System with that Song_view_FK_System
	def merge(that: Song_view_FK_System[Time]) =
		new Song_view_FK_System(
				this.song_viewsTable.merge(that.song_viewsTable), 
				this.artsTable.merge(that.artsTable),
				this.songsTable.merge(that.songsTable),
				this.albsTable.merge(that.albsTable),
				this.genresTable.merge(that.genresTable) )

	//COMPARE this Song_view_FK_System with that Song_view_FK_System
	//ignore
	def compare(that: Song_view_FK_System[Time]) = 
				true



  /*
   * EXTRA METHODS FOR PROOFS
   */

	//REFERENTIAL INTEGRITY
	//Checks if for every elem of Song_viewsTable, there is the corresponding element in the referenced tables
	def refIntegrityHolds(pk: Song_view_PKs) = {
		(this.song_viewsTable.isVisible(pk) 
		 ) =>: {
				val song_view = this.song_viewsTable.get(pk).fst
				this.artsTable.isVisible( new Art_PKs(song_view.art_name, song_view.art_country ))
				this.songsTable.isVisible(song_view.s_title)
				this.albsTable.isVisible(song_view.alb_title)
				this.genresTable.isVisible(song_view.genr_style)
				}
	}

}



/*
 * OBJECT FOR EXTRA PROOFS
 */
object Song_view_FK_System extends CvRDTProof1[Song_view_FK_System] {

	//REFERENTIAL INTEGRITY
	proof genericReferentialIntegrity[Time] {
		forall(s1: Song_view_FK_System[Time], s2: Song_view_FK_System[Time], pk: Song_view_PKs) {
			( s1.reachable() && s2.reachable() && 
			  s1.compatible(s2) &&
			  s1.refIntegrityHolds(pk) && s2.refIntegrityHolds(pk) 
			) =>: {
				s1.merge(s2).refIntegrityHolds(pk)
			}
		}
	}

}
