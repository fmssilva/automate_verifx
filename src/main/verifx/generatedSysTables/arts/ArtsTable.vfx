
import generatedSysTables.arts.Art
import antidote.crdts.lemmas.CvRDTProof1
import antidote.crdts.tables.DWTable

/**
 * CLASS REPRESENTING A TABLE OF ROWS OF ELEMENTS OF TYPE:
 *		- ART -
 *
 * @param before - function to compare two Time values
 * @param elements - Map of elements/rows in the table,
 *                   where Key is the PK of the Table
 *                   and Value is a Tuple with the Element itself,
 *                          and a MVRegister to store - the flags for Insert/Update, Touched/Referenced, Delete, as Int values, 
 *                                                    - and a Time
 */
class ArtsTable[Time, FK <: PKTrait, V <: CvRDT_Element[V], T <: DWTable[ PK, V, Time, T]]
					( before: (Time, Time) => Boolean,						//function
					  elements: Map[Art_PKs, Tuple[Art, MVRegister[Int,Time]]],	//row
					  //fkTables: LList [DWTable [FK, V, Time, T]]  //TODO: Ã© assim que se declara o tipo de tabelas? Time pode ser o mesmo que esta tabela??
					  ) extends DWTable[Art_PKs, Art, Time, ArtsTable[Time]]{





	/*
	* Implement Methods DECLARED in DWTable trait
	*/
	def copy(newElements: Map[Art_PKs, Tuple[Art, MVRegister[Int, Time]]]) =
		    new ArtsTable(this.before, newElements)

	def maintainState() = this

//	//TODO: confirmar tipo de lista de DWTables e atualizar aqui e no header da class
//	def getFKsTables () : LList [DWTable [FK, V, Time, T]] =
//        this.fkTables
//
//
//	//
//	def getFKsAttributes (pk: PK): LList[Tuple[PK, Int]] =
//        elements.get(pk).fks



}

object ArtsTable extends CvRDTProof1[ArtsTable]
