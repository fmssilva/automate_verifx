
import antidote.crdts.lemmas.CvRDT
import antidote.crdts.LamportClock
import antidote.crdts.VersionVector
import antidote.crdts.lemmas.CvRDTProof1
import generatedSysTables.alb_spk_1cfks.Alb_spk_1cfksTable
import generatedSysTables.art_cpks.Art_cpksTable
import generatedSysTables.art_cpks.Art_cpk

/*
 * class implementing the FK - Referential Integrity - Invariant
 */
class Alb_spk_1cfk_FK_System[Time](
					alb_spk_1cfksTable: Alb_spk_1cfksTable[Time],
					art_cpksTable: Art_cpksTable[Time] )
					extends CvRDT[Alb_spk_1cfk_FK_System[Time]] {


  /*
   * OVERRIDE DEFAULT IMPLEMENTATION OF METHODS IN CvRDT TRAIT
   */ 

	//REACHABLE - check if this table and the referenced tables are reachable
	override def reachable(): Boolean =
				this.alb_spk_1cfksTable.reachable() && 
				this.art_cpksTable.reachable()


	//COMPATIBLE - check if this Alb_spk_1cfk_FK_System is compatible with that alb_spk_1cfksTable
	override def compatible(that: Alb_spk_1cfk_FK_System[Time]): Boolean =
				this.alb_spk_1cfksTable.compatible(that.alb_spk_1cfksTable) &&
				this.art_cpksTable.compatible(that.art_cpksTable)


	//EQUALS - check if this Alb_spk_1cfk_FK_System is equal to that Alb_spk_1cfk_FK_System
	override def equals(that: Alb_spk_1cfk_FK_System[Time]) =
				this == that


  /*
   * IMPLEMENT DECLARED METHODS IN CvRDT TRAIT
   */

	//MERGE this Alb_spk_1cfk_FK_System with that Alb_spk_1cfk_FK_System
	def merge(that: Alb_spk_1cfk_FK_System[Time]) =
		new Alb_spk_1cfk_FK_System(
				this.alb_spk_1cfksTable.merge(that.alb_spk_1cfksTable), 
				this.art_cpksTable.merge(that.art_cpksTable) )

	//COMPARE this Alb_spk_1cfk_FK_System with that Alb_spk_1cfk_FK_System
	//ignore
	def compare(that: Alb_spk_1cfk_FK_System[Time]) = 
				true



  /*
   * EXTRA METHODS FOR PROOFS
   */

	//REFERENTIAL INTEGRITY
	//Checks if for every elem of Alb_spk_1cfksTable, there is the corresponding element in the referenced tables
	def refIntegrityHolds(pk: String) = {
		(this.alb_spk_1cfksTable.isVisible(pk) 
		 ) =>: {
				val alb_spk_1cfk = this.alb_spk_1cfksTable.get(pk).fst
				this.art_cpksTable.isVisible( new Art_cpk_PKs(alb_spk_1cfk.art_name, alb_spk_1cfk.art_country))
				}
	}

	// REACHABLE WITH ASSUMPTIONS - ASSOCIATIVITY
	def reachableWithAssociativityAssumptions(): Boolean = {
				this.alb_spk_1cfksTable.reachable() && 
				this.art_cpksTable.reachable() && 
				this.mergeValuesAssumptions()
	}
		//HELPER METHOD - ASSUMPTIONS FOR MERGE ASSOCIATIVITY - for the tables of this Alb_spk_1cfk_FK_System
		private def mergeValuesAssumptions(): Boolean = {
			forall(v1: Alb_spk_1cfksTable[Time], v2: Alb_spk_1cfksTable[Time], v3: Alb_spk_1cfksTable[Time])
				  { v1.merge(v2).merge(v3) == v1.merge( v2.merge(v3) )
				  } &&
			forall(v1: Art_cpksTable[Time], v2: Art_cpksTable[Time], v3: Art_cpksTable[Time])
				  { v1.merge(v2).merge(v3) == v1.merge( v2.merge(v3) )
				  }
		}

}



/*
 * OBJECT FOR EXTRA PROOFS
 */
object Alb_spk_1cfk_FK_System extends CvRDTProof1[Alb_spk_1cfk_FK_System] {

	//REFERENTIAL INTEGRITY
	proof genericReferentialIntegrity[Time] {
		forall(s1: Alb_spk_1cfk_FK_System[Time], s2: Alb_spk_1cfk_FK_System[Time], pk: String) {
			( s1.reachable() && s2.reachable() && 
			  s1.compatible(s2) &&
			  s1.refIntegrityHolds(pk) && s2.refIntegrityHolds(pk) 
			) =>: {
				s1.merge(s2).refIntegrityHolds(pk)
			}
		}
	}

	//MERGE ASSOCIATIVE
	proof mergeIsAssociative[Time] {
		forall(s1: Alb_spk_1cfk_FK_System[Time], s2: Alb_spk_1cfk_FK_System[Time], s3: Alb_spk_1cfk_FK_System[Time]) {
			(s1.reachable() && s2.reachable() && s3.reachable() &&
			  s1.compatible(s2) && s1.compatible(s3) && s2.compatible(s3)
			) =>: {
				val aux = s1.merge(s2).merge(s3)
				aux.equals(s1.merge( s2.merge(s3) ))
				aux.reachable()
				}
		}
	}}
