[0m[[0m[0mdebug[0m] [0m[0m> Exec(test, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Test / test[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[33mwarn[0m] [0m[0mThere may be incompatibilities among your library dependencies; run 'evicted' to see detailed eviction warnings.[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 1 Scala source to /Users/kevin/Documents/VUB/Phd/Programming/Scala/CRDT Proofs/target/scala-2.13/classes ...[0m
[0m[[0m[0minfo[0m] [0m[0mdone compiling[0m
[0m[[0m[0minfo[0m] [0m[0mcompiling 4 Scala sources to /Users/kevin/Documents/VUB/Phd/Programming/Scala/CRDT Proofs/target/scala-2.13/test-classes ...[0m
[0m[[0m[0minfo[0m] [0m[0mdone compiling[0m
[0m[[0m[0minfo[0m] [0m[0m[32mHaskellTest:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mHaskell trait[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should provide correct updateLookupWithKeyTest function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should provide correct odd function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should provide correct maybe function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should provide correct foldrTest function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should provide correct isJust function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mProofTests:[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mUWMap's merge[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should converge1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should converge2 *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  java.lang.AssertionError: assertion failed: Could not prove (UWMap,UWMap_converges2) [aborted][0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.Predef$.assert(Predef.scala:282)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.Prover.prove(Prover.scala:21)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.Prover.prove$(Prover.scala:14)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.sets.ProofTests.prove(ProofTests.scala:6)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.sets.ProofTests.$anonfun$new$2(ProofTests.scala:33)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:22)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:20)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  ...[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should converge3[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mRGA[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CmRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should be a CmRDT 2 *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  java.lang.AssertionError: assertion failed: Could not prove (RGA,RGA_add_remove_commute) [aborted][0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.Predef$.assert(Predef.scala:282)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.Prover.prove(Prover.scala:21)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.Prover.prove$(Prover.scala:14)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.sets.ProofTests.prove(ProofTests.scala:6)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.sets.ProofTests.$anonfun$new$5(ProofTests.scala:53)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:22)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:20)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  ...[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mDPNCounter's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPNSet[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should be a CvRDT *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  java.lang.AssertionError: assertion failed: Could not prove (PNSet,PNSet_is_a_CvRDT) [aborted][0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.Predef$.assert(Predef.scala:282)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.Prover.prove(Prover.scala:21)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.Prover.prove$(Prover.scala:14)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.sets.ProofTests.prove(ProofTests.scala:6)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.sets.ProofTests.$anonfun$new$10(ProofTests.scala:78)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:22)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:20)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  ...[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mCounter[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CmRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mGCounter[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPNCounter[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPNCounter2[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPNCounter's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTwoPMap[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should diverge222[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mGCounter's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPNCounter2's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mMVRegister's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mMVRegister[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPosts[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should converge[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTwoPMapFull[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should not converge[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTwoPMapFull[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should diverge *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  java.lang.AssertionError: assertion failed: Could not prove (TwoPMapFull,TwoPMapFull_diverges) [aborted][0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.Predef$.assert(Predef.scala:282)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.Prover.prove(Prover.scala:21)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.Prover.prove$(Prover.scala:14)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.sets.ProofTests.prove(ProofTests.scala:6)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.sets.ProofTests.$anonfun$new$32(ProofTests.scala:193)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:22)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:20)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  ...[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mTwoPMap[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should diverge[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should diverge for every instantiation[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPureAWSet[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should converge[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPureRWSet[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should converge[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPureMVRegister[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should converge[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPure DWFlag[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should converge[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPure EWFlag[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should converge[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mLWWRegister's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mLWWRegister[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CmRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mGSet's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m2PSet's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m2PSet[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CmRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mUSet[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CmRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mLWWSet's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mLWWSet[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mEfficientLWWSet's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mEfficientLWWSet[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m- should be a CvRDT *** FAILED ***[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  java.lang.AssertionError: assertion failed: Could not prove (EfficientLWWSet,EfficientLWWSet_is_a_CvRDT) [aborted][0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at scala.Predef$.assert(Predef.scala:282)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.Prover.prove(Prover.scala:21)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.Prover.prove$(Prover.scala:14)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.sets.ProofTests.prove(ProofTests.scala:6)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at be.vub.kdeporre.crdtproofs.sets.ProofTests.$anonfun$new$68(ProofTests.scala:374)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf(OutcomeOf.scala:85)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf.outcomeOf$(OutcomeOf.scala:83)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.OutcomeOf$.outcomeOf(OutcomeOf.scala:104)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:22)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  at org.scalatest.Transformer.apply(Transformer.scala:20)[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m  ...[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPNSet's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mPNSet[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mORSet's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mORSet[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CmRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mORSet2's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mMWSSet1[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CmRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mMWSSet2[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should not be a CmRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mOptORSet's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mOptORSet[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m2P2PGraph's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m2P2PGraph[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CmRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAddOnlyDAG[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAddOnlyDAG's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAddOnlyDag[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CmRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAddRemovePartialOrder's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mAddRemovePartialOrder[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CmRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should work[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mContinuumSeq's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mContinuumSeq[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CmRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mGMap's merge function[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be commutative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be idempotent[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be associative[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32mGMap[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[32m- should be a CvRDT[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mRun completed in 20 minutes, 15 seconds.[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTotal number of tests run: 120[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mSuites: completed 2, aborted 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[36mTests: succeeded 115, failed 5, canceled 0, ignored 0, pending 0[0m[0m
[0m[[0m[0minfo[0m] [0m[0m[31m*** 5 TESTS FAILED ***[0m[0m
[0m[[0m[31merror[0m] [0m[0mFailed tests:[0m
[0m[[0m[31merror[0m] [0m[0m	be.vub.kdeporre.crdtproofs.sets.ProofTests[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
[0m[[0m[31merror[0m] [0m[0m(Test / [31mtest[0m) sbt.TestsFailedException: Tests unsuccessful[0m
[0m[[0m[31merror[0m] [0m[0mTotal time: 1227 s (20:27), completed Dec 3, 2021, 12:17:22 PM[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(idea-shell, None, None)[0m
